[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "alphafold-mcp"
version = "0.1.0"
description = "MCP server for AlphaFold."
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "anthropic>=0.49.0",
    "httpx>=0.27.0",
    "pydantic>=1.10",
    "mcp[cli]>=1.6.0",
    "diskcache>=5.6.3",
    "platformdirs>=4.3.6",
    "streamlit>=1.44.1",
    "pydantic-settings>=2.0.1",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_alphafold"]

[project.scripts]
mcp-server-alphafold = "mcp_alphafold.server.run_server:main"

[tool.uv]
dev-dependencies = [
    "isort>=6.0.1",
    "mypy>=1.9.0",
    "pre-commit>=4.1.0",
    "pyright>=1.1.389",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.8.0",
    "pytest-httpx",
    "pytest-asyncio",
    "pytest-mock",
    "pytest-cov>=4.1.0",
]

[tool.ruff]
line-length = 120
[tool.ruff.lint]
select = [
    "F",  # flake8 rules
    "E",  # pydocstyle error rules
    "W",  # pydocstyle warning rules
    "B",  # flake8-bugbear rules
    "I",  # isort rules
]
ignore = [
    "E501",  # line-too-long
    "F841",  # Unused variable
]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.pytest.ini_options]
addopts = "--cov=mcp_alphafold --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"


[tool.coverage.run]
source = ["mcp_alphafold"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
